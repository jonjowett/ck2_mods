targetted_decisions = {
	# ROOT = targeted character ; FROM = decision taker ; FROMFROM = third party (if applicable)
	
	
	
	
	
	edmp_apply_invasion_permission_flag_to_this_character_decision = {
		
		ai = no
		filter = all_including_me
		
		from_potential = {
			edmp_this_character_can_take_admin_actions = yes
			edmp_global_invasion_permissions_are_managed_individually = yes
			edmp_mod_is_active_in_normal_mode = yes
		}
		
		# Only allow potential-humans to be flagged
		potential = {
			edmp_this_character_could_be_a_human_player = yes
			edmp_this_character_has_no_invasion_permission_flag = yes
		}
		
		allow = { edmp_all_invasion_permission_character_flags_have_not_been_issued = yes }
		
		effect = { edmp_apply_invasion_permission_flag_to_this_character = yes }
		
	}
	
	
	
	
	
	edmp_remove_invasion_permission_flag_from_this_character_decision = {
		
		ai = no
		filter = all_including_me
		
		from_potential = {
			edmp_this_character_can_take_admin_actions = yes
			edmp_global_invasion_permissions_are_managed_individually = yes
			edmp_mod_is_active_in_normal_mode = yes
		}
		
		# Any character with a flag can be manually unflagged (player or not)
		potential = { edmp_this_character_has_any_invasion_permission_flag = yes }
		
		allow = { always = yes }
		
		effect = { edmp_remove_invasion_permission_flag_from_this_character = yes }
		
	}
	
	
	
	
	
	edmp_remove_invasion_permission_flag_from_listed_character_decision = {
		
		ai = no
		filter = self
		
		third_party_filter = all
		
		# What scope should the third party be filtered from?
		# ROOT & FROM should be identical when self-targeted, but FROM is sometimes-nonfunctional in these decisions (see from_potential), so filter from ROOT to be safe.
		third_party = ROOT
		
		# Non-functional in self-targeted decisions
		from_potential = { always = yes }
		
		potential = {
			edmp_this_character_can_take_admin_actions = yes
			edmp_global_invasion_permissions_are_managed_individually = yes
			edmp_mod_is_active_in_normal_mode = yes
		}
		
		# Only allow the decision to be taken if there will be someone in the third-party list
		allow = {                 any_character = { edmp_this_character_has_any_invasion_permission_flag = yes } }
		
		third_party_potential = { ROOT_FROMFROM = { edmp_this_character_has_any_invasion_permission_flag = yes } }
		
		third_party_allow = { always = yes }
		
		effect = {
			ROOT_FROMFROM = {
				show_scope_change = no
				edmp_remove_invasion_permission_flag_from_this_character = yes
			}
		}
		
	}
	
	
	
	
	
}





title_decisions = {
	# ROOT = targeted title ; FROM = decision taker ; FROMFROM = third party (if applicable)
	
	
	
	
	
	edmp_apply_invasion_permission_flag_to_this_title_decision = {
		
		ai = no
		filter = all
		
		third_party_filter = all
		
		# What scope should the third party be filtered from?
		# Since there's no filter, this probably doesn't matter, but let's use FROM (decision-taker) just to be safe.
		third_party = FROM
		
		from_potential = {
			edmp_this_character_can_take_admin_actions = yes
			edmp_global_invasion_permissions_are_managed_individually = yes
			edmp_mod_is_active_in_normal_mode = yes
		}
		
		# Invasion permission can only be given at kingdom level, and only to kingdoms that have de jure vassals.
		# Further, only show this decision if there is someone who could be given permission.
		potential = {
			tier = KING
			OR = {
				any_direct_de_jure_vassal_title = { tier = COUNT }
				any_direct_de_jure_vassal_title = { any_direct_de_jure_vassal_title = { tier = COUNT } }
			}
		}
		
		# Only allow the decision to be taken if there will be someone in the third-party list
		allow = {
			any_character = {
				# Keep the contents of this block in sync with the equivalent section in third_party_potential
				edmp_this_character_has_any_invasion_permission_flag = yes
				ROOT = { edmp_this_title_has_invasion_permission_flag_matching_prev_character = no }
			}
		}
		
		# Only include characters for whom invasion permission management is enabled, but they do NOT have permission for this kingdom
		third_party_potential = {
			ROOT_FROMFROM = {
				# Keep the contents of this block in sync with the equivalent section in allow
				edmp_this_character_has_any_invasion_permission_flag = yes
				ROOT = { edmp_this_title_has_invasion_permission_flag_matching_prev_character = no }
			}
		}
		
		third_party_allow = { always = yes }
		
		effect = { ROOT_FROMFROM = { ROOT = { edmp_apply_prev_characters_invasion_permission_flag_to_this_title = yes } } }
		
	}
	
	
	
	
	
	edmp_remove_invasion_permission_flag_from_this_title_decision = {
		
		ai = no
		filter = all
		
		third_party_filter = all
		
		# What scope should the third party be filtered from?
		# Since there's no filter, this probably doesn't matter, but let's use FROM (decision-taker) just to be safe.
		third_party = FROM
		
		from_potential = {
			edmp_this_character_can_take_admin_actions = yes
			edmp_global_invasion_permissions_are_managed_individually = yes
			edmp_mod_is_active_in_normal_mode = yes
		}
		
		# Invasion permission can only be given at kingdom level, and only to kingdoms that have de jure vassals.
		# Further, only show this decision if there is someone who could have permission revoked.
		potential = {
			tier = KING
			OR = {
				any_direct_de_jure_vassal_title = { tier = COUNT }
				any_direct_de_jure_vassal_title = { any_direct_de_jure_vassal_title = { tier = COUNT } }
			}
		}
		
		# Only allow the decision to be taken if there will be someone in the third-party list
		allow = {
			any_character = {
				# Keep the contents of this block in sync with the equivalent section in third_party_potential
				ROOT = { edmp_this_title_has_invasion_permission_flag_matching_prev_character = yes }
			}
		}
		
		# Only include characters who have permission to invade this specific title
		third_party_potential = {
			ROOT_FROMFROM = {
				# Keep the contents of this block in sync with the equivalent section in allow
				ROOT = { edmp_this_title_has_invasion_permission_flag_matching_prev_character = yes }
			}
		}
		
		third_party_allow = { always = yes }
		
		effect = { ROOT_FROMFROM = { ROOT = { edmp_remove_prev_characters_invasion_permission_flag_from_this_title = yes } } }
		
	}
	
	
	
	
	
}